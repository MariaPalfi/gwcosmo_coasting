#!/usr/bin/env python3
"""
This script calculates pdets.
Ignacio Magana, Rachel Gray.

Modified by Mária Pálfi (Eötvös University, Budapest, Hungary, e-mail: marika97@student.elte.hu) 
	    and Péter Raffai (Eötvös University, Budapest, Hungary) (2023)
"""
# System imports
import pkg_resources
import os
import sys
from optparse import Option, OptionParser
import pickle

import numpy as np
import gwcosmo_coasting

from scipy.interpolate import interp2d
from scipy.special import logit

data_path = pkg_resources.resource_filename('gwcosmo_coasting', 'data/')

def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

# Command line options
parser = OptionParser(
    description = __doc__,
    usage = "%prog [options]",
    option_list = [
        Option("--mass_distribution", default=None,
            help="Choose between BNS or NSBH/BBH-powerlaw, NSBH/BBH-powerlaw-gaussian, NSBH/BBH-broken-powerlaw mass distributions for default Pdet calculations."),
        Option("--psd", default=None, type=str,
            help="Select between 'O1' and 'O2' and 'O3' PSDs, for default Pdet calculations. By default we use aLIGO at design sensitivity."),
        Option("--powerlaw_slope", default='1.6', type=float,
            help="Set powerlaw slope for BBH powerlaw mass distribution."),
        Option("--powerlaw_slope_2", default='0.0', type=float,
            help="Set second powerlaw slope for BBH with broken powerlaw mass distribution."),
        Option("--beta", default='0.0', type=float,
            help="Set powerlaw slope for the second black hole."),
        Option("--minimum_mass", default='5.0', type=float,
            help="Set minimum mass in the source frame for BBH (default is 5)."),
        Option("--maximum_mass", default='100.0', type=float,
            help="Set maximum mass in the source frame for BBH mass distribution (default is 100)."),
        Option("--mu_g", default='35.0', type=float,
            help="Set the mu of the gaussian peak in case of BBH-powerlaw-gaussian mass distribution."),
        Option("--lambda_peak", default='0.2', type=float,
            help="Set the lambda of the gaussian peak in case of BBH-powerlaw-gaussian mass distribution."),
        Option("--sigma_g", default='5.0', type=float,
            help="Set the sigma of the gaussian peak in case of BBH-powerlaw-gaussian mass distribution."),
        Option("--delta_m", default='0.', type=float,
            help="Set the smoothing parameter in case of BBH-powerlaw-gaussian or BBH-broken-powerlaw mass distributions."),
        Option("--b", default='0.5', type=float,
            help="Set the fraction at which the powerlaw breaks in case of BBH-broken-powerlaw mass distribution."),
        Option("--basic_pdet", default='False',
            help="Allow for masses to be redshifted in Pdet using False."),
        Option("--full_waveform", default='True',
            help="Use the full waveform to calculate detection probability, otherwise only use the inspiral part (default is True)."),
        Option("--Nsamps", default=10000,
            help="The number of samples to use to calculate detection probability (default is 10000)."),
        Option("--constant_H0", default='False',
            help="Compute at a fixed H0 value (default is False)."),
        Option("--min_H0", default='20.0', type=float,
            help="Set minimum value of H0 Posterior (default is 20)."),
        Option("--max_H0", default='200.0', type=float,
            help="Set maximum value of H0 Posterior (default is 200)."),
        Option("--bins_H0", default='100', type=int,
            help="Set number of H0 Posterior bins (default is 100)"),
        Option("--H0", default=70,
            help="Set H0 value when using constant_H0 = True (default is 70)."),
        Option("--combine", default=None,
            help="Directory of constant_H0 Pdets to combine into single Pdet pickle."),
        Option("--outputfile", default=None,
            help="Name of output pdet file."),
         Option("--k", type=int,
            help="Curvator parameter of the coasting cosmology. k can be -1, 0 or 1."), # added by Mária Pálfi
        Option("--snr", default='12.0', type=float,
            help="Network SNR threshold."),
        Option("--detected_masses", default='False',
            help="Set to True if you want to keep track of the detected masses."),
        Option("--detectors", default='HLV',
            help="Set the detectors to use for the pickle (default=HLV)."),
        Option("--det_combination", default='True',
            help="Set whether or not to consider all possible detectors combinations (default=True)."),
        Option("--seed", default='1000', type=int,
            help="Set the random seed.")
    ])
opts, args = parser.parse_args()

if opts.k not in [0, 1, -1]:
	parser.error('k must be 0, 1, or -1.') # added by Mária Pálfi, currently we can only use these values

print(opts)
	
# Check for missing required arguments
missing = []
for option in parser.option_list:
    if 'required' in option.help and eval('opts.' + option.dest) == None:
        missing.extend(option._long_opts)
if len(missing) > 0:
    parser.error('Missing required options: {0}'.format(str(missing)))

mass_distribution = str(opts.mass_distribution)

psd = opts.psd
seed = int(opts.seed)
alpha = float(opts.powerlaw_slope)
Mmin = float(opts.minimum_mass)
Mmax = float(opts.maximum_mass)
alpha_2 = float(opts.powerlaw_slope_2)
beta = float(opts.beta)
mu_g = float(opts.mu_g)
lambda_peak = float(opts.lambda_peak)
sigma_g = float(opts.sigma_g)
delta_m = float(opts.delta_m)
b = float(opts.b)

min_H0 = float(opts.min_H0)
max_H0 = float(opts.max_H0)
bins_H0 = int(opts.bins_H0)
det_combination = str2bool(opts.det_combination)
basic = str2bool(opts.basic_pdet)
full_waveform = str2bool(opts.full_waveform)
Nsamps = int(opts.Nsamps)
network_snr_threshold = float(opts.snr)
constant_H0 = str2bool(opts.constant_H0)
pdet_path = str(opts.combine)
k = int(opts.k) # added by Mária Pálfi
detected_masses = str2bool(opts.detected_masses)
detector = str(opts.detectors)

dets = []
if 'H' in detector:
    dets.append('H1')
if 'L' in detector:
    dets.append('L1')
if 'V' in detector:
    dets.append('V1')

if constant_H0 is True:
    H0 = float(opts.H0)
else:
    H0 = np.linspace(min_H0, max_H0, bins_H0)

if full_waveform is True:
    kind = 'full_waveform'
else:
    kind = 'inspiral'

if opts.combine is None:

    if opts.outputfile is None:
        if psd != None:
            if mass_distribution == 'BNS':
                pdet_path = '{}PSD_{}_Nsamps{}_{}_k{}.p'.format(psd, mass_distribution, Nsamps, kind, k) # changed by Mária Pálfi
            else:
                pdet_path = '{}PSD_{}_alpha_{}_Mmin_{}_Mmax_{}_Nsamps{}_{}_k_{}.p'.format(psd, mass_distribution, alpha, Mmin, Mmax, Nsamps, kind, k) # changed by Mária Pálfi

        else:
            if mass_distribution == 'BNS':
                pdet_path = '{}_Nsamps{}_{}_k_{}.p'.format(mass_distribution, Nsamps, kind, k) # changed by Mária Pálfi
            else:
                pdet_path = '{}_alpha_{}_Mmin_{}_Mmax_{}_Nsamps{}_{}_k_{}.p'.format(mass_distribution, alpha, Mmin, Mmax, Nsamps, kind, k) # changed by Mária Pálfi
    else:
        pdet_path = str(opts.outputfile)

    pdet = gwcosmo_coasting.likelihood.detection_probability.DetectionProbability(mass_distribution=mass_distribution, asd=psd, detected_masses=detected_masses, basic=basic, detectors=dets,
                                                              alpha=alpha, Mmin=Mmin, Mmax=Mmax, alpha_2=alpha_2, mu_g=mu_g, sigma_g=sigma_g,
                                                              lambda_peak=lambda_peak, beta=beta, full_waveform=full_waveform, Nsamps=Nsamps, det_combination = det_combination,
                                                              b=b, delta_m=delta_m, constant_H0=constant_H0, H0=H0, network_snr_threshold=network_snr_threshold, path=pdet_path, seed=seed, k=k) # set k, added by Mária Pálfi


    pickle.dump( pdet, open( pdet_path, "wb" ) )

else:
    probs = {}
    detected = {}
    for file in os.listdir(pdet_path):
        if file.endswith(".p"):
            pdets = pickle.load(open(os.path.join(pdet_path,str(file)), 'rb'))
            detected_masses = pdets.detected_masses
            break

    for file in os.listdir(pdet_path):
        if file.endswith(".p"):
             pdets = pickle.load(open(os.path.join(pdet_path,str(file)), 'rb'))
             h0 = pdets.H0vec
             probs[h0] = pdets.prob
             if detected_masses==True:
                 detected[h0] = pdets.detected

    H0vec = np.array(list(probs.keys()))
    H0vec = sorted(H0vec)
    values = []
    for h0 in H0vec:
        values.append(probs[h0])
    prob = np.array(values)
    print('Total number of H0 bins: '+str(len(H0vec)))
    print(H0vec)
    print(prob)
    pdet = gwcosmo_coasting.likelihood.detection_probability.DetectionProbability(
                    mass_distribution=pdets.mass_distribution, alpha=pdets.alpha, Mmin=pdets.Mmin, Mmax=pdets.Mmax,
                    asd=pdets.asd, detectors=pdets.detectors, detected_masses=detected_masses, alpha_2=pdets.alpha_2,
                    Nsamps=2, network_snr_threshold=pdets.snr_threshold,seed=pdets.seed, beta=pdets.beta, mu_g=pdets.mu_g,
                    basic=False, M1=pdets.M1, M2=pdets.M2, lambda_peak=pdets.lambda_peak,
                    sigma_g=pdets.sigma_g, delta_m=pdets.delta_m, b=pdets.b, constant_H0=False, H0=H0vec, full_waveform=pdets.full_waveform, k=k) # set k, added by Mária Pálfi

    if pdets.full_waveform is True:
       kind = 'full_waveform'
    else:
       kind = 'inspiral'

    pdet.Nsamps = pdets.Nsamps
    pdet.H0vec = H0vec
    pdet.prob = prob
    pdet.RAs = pdets.RAs
    pdet.Decs = pdets.Decs
    pdet.incs = pdets.incs
    pdet.psis = pdets.psis
    pdet.phis = pdets.phis
    pdet.dl_array = pdets.dl_array
    pdet.m1 = pdets.m1/1.9884754153381438e30
    pdet.m2 = pdets.m2/1.9884754153381438e30
    pdet.dets = pdets.dets
    pdet.psds = pdets.psds
    pdet.z_array = pdets.z_array
    pdet.k = pdets.k # added by Mária Pálfi

    logit_prob=logit(prob)
    for i in range (len(logit_prob)):
        logit_prob[i]=np.where(logit_prob[i]==float('+inf'), 100, logit_prob[i])
        logit_prob[i]=np.where(logit_prob[i]==float('-inf'), -33, logit_prob[i])
    interp_average = interp2d(pdet.z_array, pdet.H0vec, logit_prob, kind='cubic')
    pdet.interp_average = interp_average

    if pdets.asd != None:
        if pdets.mass_distribution == 'BBH-powerlaw' or pdets.mass_distribution == 'NSBH-powerlaw':
            pdet_path = '{}PSD_{}_alpha_{}_beta_{}_Mmin_{}_Mmax_{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.asd, pdets.mass_distribution,
                                                                             str(pdets.alpha), str(pdets.beta), str(pdets.Mmin), str(pdets.Mmax),
                                                                             str(pdets.Nsamps), kind, str(pdets.snr_threshold), str(pdets.k)) # changed by Mária Pálfi
        elif pdets.mass_distribution == 'BBH-powerlaw-gaussian' or pdets.mass_distribution == 'NSBH-powerlaw-gaussian':
            pdet_path = '{}PSD_{}_alpha_{}_beta_{}_Mmin_{}_Mmax_{}_mu_{}_lambda_{}_sigma_{}_delta_{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.asd,
                                                                             pdets.mass_distribution, str(pdets.alpha), str(pdets.beta), str(pdets.Mmin), str(pdets.Mmax),
                                                                             str(pdets.mu_g), str(pdets.lambda_peak), str(pdets.sigma_g),                                                          
                                                                             str(pdets.delta_m),str(pdets.Nsamps), kind, str(pdets.snr_threshold), str(pdets.k)) # changed by Mária Pálfi
        elif pdets.mass_distribution == 'BBH-broken-powerlaw' or pdets.mass_distribution == 'NSBH-broken-powerlaw':
            pdet_path = '{}PSD_{}_alpha1_{}_alpha2_{}_beta_{}_Mmin_{}_Mmax_{}_delta_{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.asd, pdets.mass_distribution,
                                                                             str(pdets.alpha), str(pdets.alpha_2), str(pdets.beta), str(pdets.Mmin),
                                                                             str(pdets.Mmax), str(pdets.delta_m),str(pdets.Nsamps), kind, str(pdets.snr_threshold),str(pdets.k)) # changed by Mária Pálfi
        else:
            pdet_path = '{}PSD_{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.psd, pdets.mass_distribution, str(pdets.Nsamps), kind,str(pdets.snr_threshold), str(pdets.k)) # changed by Mária Pálfi
    else:
        if pdets.mass_distribution == 'BBH-powerlaw' or pdets.mass_distribution == 'NSBH-powerlaw':
            pdet_path = '{}_alpha_{}_beta_{}_Mmin_{}_Mmax_{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.mass_distribution,
                                                                             str(pdets.alpha), str(pdets.beta), str(pdets.Mmin), str(pdets.Mmax),
                                                                             str(pdets.Nsamps), kind, str(pdets.snr_threshold), str(pdets.k)) # changed by Mária Pálfi
        elif pdets.mass_distribution == 'BBH-powerlaw-gaussian' or pdets.mass_distribution == 'NSBH-powerlaw-gaussian':
            pdet_path = '{}_alpha_{}_beta_{}_Mmin_{}_Mmax_{}_mu_{}_lambda_{}_sigma_{}_delta_{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.mass_distribution,
                                                                             str(pdets.alpha), str(pdets.beta), str(pdets.Mmin),
                                                                             str(pdets.Mmax), str(pdets.mu_g), str(pdets.lambda_peak), str(pdets.sigma_g),                                                                                              str(pdets.delta_m),str(pdets.Nsamps), kind, str(pdets.snr_threshold), str(pdets.k)) # changed by Mária Pálfi
        elif pdets.mass_distribution == 'BBH-broken-powerlaw' or pdets.mass_distribution == 'NSBH-broken-powerlaw':
            pdet_path = '{}_alpha1_{}_alpha2_{}_beta_{}_Mmin_{}_Mmax_{}_delta_{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.mass_distribution,
                                                                             str(pdets.alpha), str(pdets.alpha_2), str(pdets.beta), str(pdets.Mmin),
                                                                             str(pdets.Mmax), str(pdets.delta_m),str(pdets.Nsamps), kind, str(pdets.snr_threshold), str(pdets.k)) # changed by Mária Pálf
        else:
            pdet_path = '{}_Nsamps{}_{}_snr_{}_k_{}'.format(pdets.mass_distribution, str(pdets.Nsamps), kind,str(pdets.snr_threshold), str(pdets.k)) # changed by Mária Pálf

    if detected_masses==True:
        np.savez(pdet_path+'_detected.npz',[detected,pdet.m1,pdet.m2])
    pickle.dump( pdet, open( pdet_path+'.p', "wb" ) )
