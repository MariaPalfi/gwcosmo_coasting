#!/usr/bin/env python3
"""
Modified by Mária Pálfi (2023)
"""

# code to generate a .dag file for submitting jobs to the cluster
import os
import numpy as np
import htcondor
from htcondor import dags
from optparse import Option, OptionParser, OptionGroup
import gwcosmo

path = os.path.abspath(os.path.dirname(__file__))

dag=dags.DAG()

parser = OptionParser(
    description = __doc__,
    usage = "%prog [options]",
    option_list = [
        Option("--min_H0", default='20.0', type=float,
            help="Minimum value of H0"),
        Option("--max_H0", default='200.0', type=float,
            help="Maximum value of H0"),
        Option("--bins_H0", default='200', type=int,
            help="Number of H0 bins"),
        Option("--posterior_samples", default=None,
            help="Path to LALinference posterior samples file in format (.dat or hdf5)"),
        Option("--posterior_samples_field", default=None,
            help="Internal field of the posterior samples file, e.g. h5 or json field"),
        Option("--skymap", default=None,
            help="Path to LALinference 3D skymap file in format (.fits or fits.gz)"),
        Option("--Pdet", default=None,
            help="Path to precomputed probability of detection pickle"),
        Option("--galaxy_weighting", default='True',
            help="Weight potential host galaxies by luminosity? (Default=True)"),
        Option("--assume_complete_catalog", default='False',
            help="Assume a complete catalog? (Default=False)"),
        Option("--redshift_uncertainty", default='True',
            help="Marginalise over redshift uncertainties (default=True)"),
        Option("--redshift_evolution", default='None',
            help="Allow GW host probability to evolve with redshift. Select between None, PowerLaw or Madau (Default=None)"),
        Option("--Lambda", default='3.0', type=float,
            help="Set rate evolution parameter Lambda for redshift evolution (For Madau model this is equal to alpha)"),
        Option("--Madau_beta", default='3.0', type=float,
            help="Set Beta for Madau model. (Not used if redshift_evolution=None or PowerLaw)"),
        Option("--Madau_zp", default='0.0', type=float,
            help="Set zp for Madau model. (Not used if redshift_evolution=None or PowerLaw)"),
        Option("--Kcorrections", default='False',
            help="Apply K-corrections."),
        Option("--reweight_posterior_samples", default='False',
            help="Reweight posterior samples with the same priors used to calculate the selection effects."),
        Option("--zmax", default='10.0', type=float,
            help="Upper redshift limit for integrals (default=10)"),
        Option("--zcut", default=None,
            help="Hard redshift cut to apply to the galaxy catalogue (default=None)"),
        Option("--mth", default=None,
            help="Override the apparent magnitude threshold of the catalogue, if provided (default=None)"),
        Option("--schech_alpha", default=None,
            help="Override the default value for slope of schechter function for given band, if provided (default=None)"),
        Option("--schech_Mstar", default=None,
            help="Override the default value for Mstar of schechter function for given band, if provided (default=None)"),
        Option("--schech_Mmin", default=None,
            help="Override the default value for Mmin of schechter function for given band, if provided (default=None)"),
        Option("--schech_Mmax", default=None,
            help="Override the default value for Mmax of schechter function for given band, if provided (default=None)"),
        Option("--nside", default='32', type=int,
            help="skymap nside choice for reading in galaxies from the overlap of catalogue and skymap (default=32)"),
        Option("--sky_area", default='0.999', type=float,
            help="contour boundary for galaxy catalogue method (default=0.999)"),
        Option("--min_pixels", default=30, type=int,
            help="minimum number of pixels desired to cover sky area of event (for use with pixel method only)"),
        Option("--outputfile", default='Posterior',
            help="Name of output file"),
        Option("--cpus", default=1, type=int,
            help="Number of cpus asked for each run (default=1)"),
        Option("--ram", default=1000, type=int,
            help="RAM asked for each run (default=1 GB)"),
        Option("--disk", default=5, type=int,
            help="Disk space asked for each run (default=5 MB"), # added by Mária Pálfi, the original default disk space is not sufficient
        Option("--search_tag", default='ligo.prod.o1.cbc.hubble.gwcosmo', type=str,
            help="Search tag for the runs -- used in LIGO clusters (default=ligo.prod.o1.cbc.hubble.gwcosmo)"),
        Option("--run_on_ligo_cluster", default='True', type=str,
            help="Set to true if running on a LIGO cluster (default=True)"),
        Option("--seed", default=None, type=int, help="Random seed"),
        Option("--numerical", default='True', type=str,
            help="If set to true numerical integration will be used for the calculation of integrals")
    ])

catalog_option_group = OptionGroup(parser, "Galaxy Catalog Options","""
Use these options to control the galaxy catalog input""")
# Add the catalog options --catalog --catalog_band
for opt in gwcosmo.prior.catalog.catalog_options:
    catalog_option_group.add_option(opt)

parser.add_option_group(catalog_option_group)

opts, args = parser.parse_args()

# None is interpreted as a string if explicitly passed to the command line, so remove arguments if None is still present
if opts.mth is None:
    mth_str = ""
else:
    mth_str = f"--mth {opts.mth}"

if opts.schech_alpha is None:
    schech_alpha_str = ""
else:
    schech_alpha_str = f"--schech_alpha {opts.schech_alpha}"

if opts.schech_Mstar is None:
    schech_Mstar_str = ""
else:
    schech_Mstar_str = f"--schech_Mstar {opts.schech_Mstar}"

if opts.schech_Mmin is None:
    schech_Mmin_str = ""
else:
    schech_Mmin_str = f"--schech_Mmin {opts.schech_Mmin}"

if opts.schech_Mmax is None:
    schech_Mmax_str = ""
else:
    schech_Mmax_str = f"--schech_Mmax {opts.schech_Mmax}"

if opts.zcut is None:
    zcut_str = ""
else:
    zcut_str = f"--zcut {opts.zcut}"

if opts.posterior_samples is None:
    samples_str = ""
else:
    samples_str = f"--posterior_samples {opts.posterior_samples}"

if opts.posterior_samples_field is None:
    samples_field_str = ""
else:
    samples_field_str = f"--posterior_samples_field {opts.posterior_samples_field}"

if opts.skymap is None:
    skymap_str = ""
else:
    skymap_str = f"--skymap {opts.skymap}"

if opts.Pdet is None:
    pdet_str = ""
else:
    pdet_str = f"--Pdet {opts.Pdet}"

if opts.catalog is None:
    catalog_str = ""
else:
    catalog_str = f"--catalog {opts.catalog}"
cpus = str(opts.cpus)
ram = str(opts.ram)
disk = str(opts.disk) # added by Mária Pálfi
search_tag = opts.search_tag

# If no seed is given, choose one up to 10000
if opts.seed is None:
    opts.seed = np.random.randint(10000)

common_args  = f"\
    --method pixel \
    --min_H0 {opts.min_H0} \
    --max_H0 {opts.max_H0} \
    --bins_H0 {opts.bins_H0} \
    {samples_str} \
    {samples_field_str} \
    {skymap_str} \
    {pdet_str} \
    {catalog_str} \
    --galaxy_weighting {opts.galaxy_weighting} \
    --catalog_band {opts.catalog_band} \
    --assume_complete_catalog {opts.assume_complete_catalog} \
    --redshift_uncertainty {opts.redshift_uncertainty} \
    --redshift_evolution {opts.redshift_evolution} \
    --Lambda {opts.Lambda} \
    --Madau_beta {opts.Madau_beta} \
    --Madau_zp {opts.Madau_zp} \
    --Kcorrections {opts.Kcorrections} \
    --reweight_posterior_samples {opts.reweight_posterior_samples} \
    --zmax {opts.zmax} \
    {zcut_str} \
    {mth_str} \
    {schech_alpha_str} \
    {schech_Mstar_str} \
    {schech_Mmin_str} \
    {schech_Mmax_str} \
    --nside {opts.nside} \
    --sky_area {opts.sky_area} \
    --min_pixels {opts.min_pixels} \
    --outputfile {opts.outputfile} \
    --seed {opts.seed} \
    --numerical {opts.numerical} \
    "

return_value = os.system(path +'/gwcosmo_single_posterior ' + common_args + ' --return_skymap_indices True')
if return_value != 0:
    raise Exception('returning pixel indices failed')

os.system('mkdir -p log')

pixelated_likelihood = htcondor.Submit(
    Executable = path+'/gwcosmo_single_posterior',
    Universe   = 'vanilla',
    #transfer_input_files = ','.join([skymap_path,posterior_samples_path,pdet_path,catalog_path]),
    #transfer_output_files = f'{event}_pixel_$(pixel_index).npz',
    #should_transfer_files = 'NO',
    arguments  = common_args + " --pixel_index $(pixel_index)",
    output     = 'log/output_pixel_$(pixel_index).out',
    error      = 'log/output_pixel_$(pixel_index).err',
    Log        = 'log/output_pixel_$(pixel_index).log',
    getenv     = 'True',
    request_cpus = cpus,
    request_memory = ram,
    request_disk = disk, # added by Mária Pálfi
)

combine_pixels = htcondor.Submit(
    Executable = path+'/gwcosmo_single_posterior',
    Universe   = 'vanilla',
    #transfer_input_files = ','.join([skymap_path,posterior_samples_path,pdet_path,catalog_path]),
    #transfer_output_files = f'{event}.npz,{event}.pdf',
    #should_transfer_files = 'NO',
    arguments  = common_args + "--combine_pixels True ",
    output     = 'log/combined.out',
    error      = 'log/combined.err',
    Log        = 'log/combined.log',
    getenv     = 'True',
    request_cpus = '1',
    request_memory = 500,
    request_disk = 5, # added by Mária Pálfi
    priority = 10
)



if opts.run_on_ligo_cluster=='True':
    pixelated_likelihood = htcondor.Submit(
        Executable = path+'/gwcosmo_single_posterior',
        Universe   = 'vanilla',
        #transfer_input_files = ','.join([skymap_path,posterior_samples_path,pdet_path,catalog_path]),
        #transfer_output_files = f'{event}_pixel_$(pixel_index).npz',
        #should_transfer_files = 'NO',
        arguments  = common_args + " --pixel_index $(pixel_index)",
        output     = 'log/output_pixel_$(pixel_index).out',
        error      = 'log/output_pixel_$(pixel_index).err',
        Log        = 'log/output_pixel_$(pixel_index).log',
        getenv     = 'True',
        request_cpus = cpus,
        accounting_group = search_tag,
        accounting_group_user = os.environ['USER'],
        request_memory = ram,
        request_disk = 5, # added by Mária Pálfi
    )

    combine_pixels = htcondor.Submit(
        Executable = path+'/gwcosmo_single_posterior',
        Universe   = 'vanilla',
        #transfer_input_files = ','.join([skymap_path,posterior_samples_path,pdet_path,catalog_path]),
        #transfer_output_files = f'{event}.npz,{event}.pdf',
        #should_transfer_files = 'NO',
        arguments  = common_args + "--combine_pixels True ",
        output     = 'log/combined.out',
        error      = 'log/combined.err',
        Log        = 'log/combined.log',
        getenv     = 'True',
        request_cpus = '1',
        accounting_group = search_tag,
        accounting_group_user = os.environ['USER'],
        request_memory = 500,
        request_disk = 5, # added by Mária Pálfi
        priority = 10
    )

pixels = np.genfromtxt('{}_indices.txt'.format(opts.outputfile),dtype=int,skip_header=1)
pixel_vars=[]
for i,ind in enumerate(pixels):
    pixel_vars.append({'pixel_index':'{}'.format(ind)})

single_pixel_layer = dag.layer(
    name = 'single_pixel',
    submit_description = pixelated_likelihood,
    vars = pixel_vars,
)

combin_pixels_layer = single_pixel_layer.child_layer(
    name = 'combine_pixel',
    submit_description = combine_pixels,
)


dags.write_dag(dag,'./')
